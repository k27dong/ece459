<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="153"><g><title>_int_malloc (1 samples, 0.65%)</title><rect x="0.0000%" y="853" width="0.6536%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="0.0000%" y="837" width="0.6536%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>[anon] (2 samples, 1.31%)</title><rect x="0.0000%" y="869" width="1.3072%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="879.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.65%)</title><rect x="0.6536%" y="853" width="0.6536%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.9036%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.65%)</title><rect x="1.9608%" y="853" width="0.6536%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="2.2108%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="853" width="0.6536%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="2.8644%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="837" width="0.6536%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="2.8644%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="821" width="0.6536%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="2.8644%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="805" width="0.6536%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="2.8644%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="789" width="0.6536%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="2.8644%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="773" width="0.6536%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="2.8644%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="757" width="0.6536%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="2.8644%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="741" width="0.6536%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="2.8644%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="725" width="0.6536%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="2.8644%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="709" width="0.6536%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="2.8644%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="693" width="0.6536%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="2.8644%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="677" width="0.6536%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="2.8644%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="661" width="0.6536%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="2.8644%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="2.6144%" y="645" width="0.6536%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="2.8644%" y="655.50"></text></g><g><title>__GI___clone (1 samples, 0.65%)</title><rect x="3.2680%" y="853" width="0.6536%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="3.5180%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="837" width="0.6536%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="3.5180%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="821" width="0.6536%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="3.5180%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="805" width="0.6536%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="3.5180%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="789" width="0.6536%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="3.5180%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="773" width="0.6536%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="3.5180%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="757" width="0.6536%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="3.5180%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="741" width="0.6536%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="3.5180%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="725" width="0.6536%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="3.5180%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="709" width="0.6536%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="3.5180%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="3.2680%" y="693" width="0.6536%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="3.5180%" y="703.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (3 samples, 1.96%)</title><rect x="3.9216%" y="853" width="1.9608%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="3"/><text x="4.1716%" y="863.50">c..</text></g><g><title>[unknown] (8 samples, 5.23%)</title><rect x="1.3072%" y="869" width="5.2288%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="8"/><text x="1.5572%" y="879.50">[unkno..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::try_recv (1 samples, 0.65%)</title><rect x="5.8824%" y="853" width="0.6536%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="6.1324%" y="863.50"></text></g><g><title>[unknown] (51 samples, 33.33%)</title><rect x="6.5359%" y="853" width="33.3333%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="51"/><text x="6.7859%" y="863.50">[unknown]</text></g><g><title>[unknown] (50 samples, 32.68%)</title><rect x="7.1895%" y="837" width="32.6797%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="50"/><text x="7.4395%" y="847.50">[unknown]</text></g><g><title>[unknown] (50 samples, 32.68%)</title><rect x="7.1895%" y="821" width="32.6797%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="50"/><text x="7.4395%" y="831.50">[unknown]</text></g><g><title>[unknown] (50 samples, 32.68%)</title><rect x="7.1895%" y="805" width="32.6797%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="50"/><text x="7.4395%" y="815.50">[unknown]</text></g><g><title>[unknown] (50 samples, 32.68%)</title><rect x="7.1895%" y="789" width="32.6797%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="50"/><text x="7.4395%" y="799.50">[unknown]</text></g><g><title>[unknown] (50 samples, 32.68%)</title><rect x="7.1895%" y="773" width="32.6797%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="50"/><text x="7.4395%" y="783.50">[unknown]</text></g><g><title>[unknown] (50 samples, 32.68%)</title><rect x="7.1895%" y="757" width="32.6797%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="50"/><text x="7.4395%" y="767.50">[unknown]</text></g><g><title>[unknown] (50 samples, 32.68%)</title><rect x="7.1895%" y="741" width="32.6797%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="50"/><text x="7.4395%" y="751.50">[unknown]</text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="39.8693%" y="837" width="1.3072%" height="15" fill="rgb(208,69,12)" fg:x="61" fg:w="2"/><text x="40.1193%" y="847.50"></text></g><g><title>hex::decode (1 samples, 0.65%)</title><rect x="41.1765%" y="613" width="0.6536%" height="15" fill="rgb(235,93,37)" fg:x="63" fg:w="1"/><text x="41.4265%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (1 samples, 0.65%)</title><rect x="41.1765%" y="597" width="0.6536%" height="15" fill="rgb(213,116,39)" fg:x="63" fg:w="1"/><text x="41.4265%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.65%)</title><rect x="41.1765%" y="581" width="0.6536%" height="15" fill="rgb(222,207,29)" fg:x="63" fg:w="1"/><text x="41.4265%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (1 samples, 0.65%)</title><rect x="41.1765%" y="565" width="0.6536%" height="15" fill="rgb(206,96,30)" fg:x="63" fg:w="1"/><text x="41.4265%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.65%)</title><rect x="41.1765%" y="549" width="0.6536%" height="15" fill="rgb(218,138,4)" fg:x="63" fg:w="1"/><text x="41.4265%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (1 samples, 0.65%)</title><rect x="41.1765%" y="533" width="0.6536%" height="15" fill="rgb(250,191,14)" fg:x="63" fg:w="1"/><text x="41.4265%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.65%)</title><rect x="41.1765%" y="517" width="0.6536%" height="15" fill="rgb(239,60,40)" fg:x="63" fg:w="1"/><text x="41.4265%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.65%)</title><rect x="41.1765%" y="501" width="0.6536%" height="15" fill="rgb(206,27,48)" fg:x="63" fg:w="1"/><text x="41.4265%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.65%)</title><rect x="41.1765%" y="485" width="0.6536%" height="15" fill="rgb(225,35,8)" fg:x="63" fg:w="1"/><text x="41.4265%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.65%)</title><rect x="41.1765%" y="469" width="0.6536%" height="15" fill="rgb(250,213,24)" fg:x="63" fg:w="1"/><text x="41.4265%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.65%)</title><rect x="41.1765%" y="453" width="0.6536%" height="15" fill="rgb(247,123,22)" fg:x="63" fg:w="1"/><text x="41.4265%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.65%)</title><rect x="41.1765%" y="437" width="0.6536%" height="15" fill="rgb(231,138,38)" fg:x="63" fg:w="1"/><text x="41.4265%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.65%)</title><rect x="41.1765%" y="421" width="0.6536%" height="15" fill="rgb(231,145,46)" fg:x="63" fg:w="1"/><text x="41.4265%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.65%)</title><rect x="41.1765%" y="405" width="0.6536%" height="15" fill="rgb(251,118,11)" fg:x="63" fg:w="1"/><text x="41.4265%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.65%)</title><rect x="41.1765%" y="389" width="0.6536%" height="15" fill="rgb(217,147,25)" fg:x="63" fg:w="1"/><text x="41.4265%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.65%)</title><rect x="41.1765%" y="373" width="0.6536%" height="15" fill="rgb(247,81,37)" fg:x="63" fg:w="1"/><text x="41.4265%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.65%)</title><rect x="41.1765%" y="357" width="0.6536%" height="15" fill="rgb(209,12,38)" fg:x="63" fg:w="1"/><text x="41.4265%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.65%)</title><rect x="41.1765%" y="341" width="0.6536%" height="15" fill="rgb(227,1,9)" fg:x="63" fg:w="1"/><text x="41.4265%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (1 samples, 0.65%)</title><rect x="41.1765%" y="325" width="0.6536%" height="15" fill="rgb(248,47,43)" fg:x="63" fg:w="1"/><text x="41.4265%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.65%)</title><rect x="41.1765%" y="309" width="0.6536%" height="15" fill="rgb(221,10,30)" fg:x="63" fg:w="1"/><text x="41.4265%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (1 samples, 0.65%)</title><rect x="41.1765%" y="293" width="0.6536%" height="15" fill="rgb(210,229,1)" fg:x="63" fg:w="1"/><text x="41.4265%" y="303.50"></text></g><g><title>hex::val (1 samples, 0.65%)</title><rect x="41.1765%" y="277" width="0.6536%" height="15" fill="rgb(222,148,37)" fg:x="63" fg:w="1"/><text x="41.4265%" y="287.50"></text></g><g><title>lab4::idea::IdeaGenerator::run (2 samples, 1.31%)</title><rect x="41.1765%" y="645" width="1.3072%" height="15" fill="rgb(234,67,33)" fg:x="63" fg:w="2"/><text x="41.4265%" y="655.50"></text></g><g><title>lab4::checksum::Checksum::update (2 samples, 1.31%)</title><rect x="41.1765%" y="629" width="1.3072%" height="15" fill="rgb(247,98,35)" fg:x="63" fg:w="2"/><text x="41.4265%" y="639.50"></text></g><g><title>hex::encode (1 samples, 0.65%)</title><rect x="41.8301%" y="613" width="0.6536%" height="15" fill="rgb(247,138,52)" fg:x="64" fg:w="1"/><text x="42.0801%" y="623.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (1 samples, 0.65%)</title><rect x="41.8301%" y="597" width="0.6536%" height="15" fill="rgb(213,79,30)" fg:x="64" fg:w="1"/><text x="42.0801%" y="607.50"></text></g><g><title>hex::encode_to_iter (1 samples, 0.65%)</title><rect x="41.8301%" y="581" width="0.6536%" height="15" fill="rgb(246,177,23)" fg:x="64" fg:w="1"/><text x="42.0801%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.65%)</title><rect x="41.8301%" y="565" width="0.6536%" height="15" fill="rgb(230,62,27)" fg:x="64" fg:w="1"/><text x="42.0801%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.65%)</title><rect x="41.8301%" y="549" width="0.6536%" height="15" fill="rgb(216,154,8)" fg:x="64" fg:w="1"/><text x="42.0801%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.65%)</title><rect x="41.8301%" y="533" width="0.6536%" height="15" fill="rgb(244,35,45)" fg:x="64" fg:w="1"/><text x="42.0801%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.65%)</title><rect x="41.8301%" y="517" width="0.6536%" height="15" fill="rgb(251,115,12)" fg:x="64" fg:w="1"/><text x="42.0801%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.65%)</title><rect x="41.8301%" y="501" width="0.6536%" height="15" fill="rgb(240,54,50)" fg:x="64" fg:w="1"/><text x="42.0801%" y="511.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.65%)</title><rect x="41.8301%" y="485" width="0.6536%" height="15" fill="rgb(233,84,52)" fg:x="64" fg:w="1"/><text x="42.0801%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.65%)</title><rect x="41.8301%" y="469" width="0.6536%" height="15" fill="rgb(207,117,47)" fg:x="64" fg:w="1"/><text x="42.0801%" y="479.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.65%)</title><rect x="41.8301%" y="453" width="0.6536%" height="15" fill="rgb(249,43,39)" fg:x="64" fg:w="1"/><text x="42.0801%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.31%)</title><rect x="43.1373%" y="421" width="1.3072%" height="15" fill="rgb(209,38,44)" fg:x="66" fg:w="2"/><text x="43.3873%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 1.31%)</title><rect x="43.1373%" y="405" width="1.3072%" height="15" fill="rgb(236,212,23)" fg:x="66" fg:w="2"/><text x="43.3873%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.31%)</title><rect x="43.1373%" y="389" width="1.3072%" height="15" fill="rgb(242,79,21)" fg:x="66" fg:w="2"/><text x="43.3873%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.31%)</title><rect x="43.1373%" y="373" width="1.3072%" height="15" fill="rgb(211,96,35)" fg:x="66" fg:w="2"/><text x="43.3873%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.31%)</title><rect x="43.1373%" y="357" width="1.3072%" height="15" fill="rgb(253,215,40)" fg:x="66" fg:w="2"/><text x="43.3873%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 1.31%)</title><rect x="43.1373%" y="341" width="1.3072%" height="15" fill="rgb(211,81,21)" fg:x="66" fg:w="2"/><text x="43.3873%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (2 samples, 1.31%)</title><rect x="43.1373%" y="325" width="1.3072%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="2"/><text x="43.3873%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.65%)</title><rect x="43.7908%" y="309" width="0.6536%" height="15" fill="rgb(235,213,38)" fg:x="67" fg:w="1"/><text x="44.0408%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (1 samples, 0.65%)</title><rect x="43.7908%" y="293" width="0.6536%" height="15" fill="rgb(237,122,38)" fg:x="67" fg:w="1"/><text x="44.0408%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.65%)</title><rect x="43.7908%" y="277" width="0.6536%" height="15" fill="rgb(244,218,35)" fg:x="67" fg:w="1"/><text x="44.0408%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="421" width="0.6536%" height="15" fill="rgb(240,68,47)" fg:x="68" fg:w="1"/><text x="44.6944%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="405" width="0.6536%" height="15" fill="rgb(210,16,53)" fg:x="68" fg:w="1"/><text x="44.6944%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="389" width="0.6536%" height="15" fill="rgb(235,124,12)" fg:x="68" fg:w="1"/><text x="44.6944%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="373" width="0.6536%" height="15" fill="rgb(224,169,11)" fg:x="68" fg:w="1"/><text x="44.6944%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="357" width="0.6536%" height="15" fill="rgb(250,166,2)" fg:x="68" fg:w="1"/><text x="44.6944%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="341" width="0.6536%" height="15" fill="rgb(242,216,29)" fg:x="68" fg:w="1"/><text x="44.6944%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="325" width="0.6536%" height="15" fill="rgb(230,116,27)" fg:x="68" fg:w="1"/><text x="44.6944%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="44.4444%" y="309" width="0.6536%" height="15" fill="rgb(228,99,48)" fg:x="68" fg:w="1"/><text x="44.6944%" y="319.50"></text></g><g><title>[libc-2.31.so] (2 samples, 1.31%)</title><rect x="45.0980%" y="293" width="1.3072%" height="15" fill="rgb(253,11,6)" fg:x="69" fg:w="2"/><text x="45.3480%" y="303.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="45.0980%" y="277" width="1.3072%" height="15" fill="rgb(247,143,39)" fg:x="69" fg:w="2"/><text x="45.3480%" y="287.50"></text></g><g><title>lab4::checksum::Checksum::update (16 samples, 10.46%)</title><rect x="42.4837%" y="629" width="10.4575%" height="15" fill="rgb(236,97,10)" fg:x="65" fg:w="16"/><text x="42.7337%" y="639.50">lab4::checksum:..</text></g><g><title>hex::decode (16 samples, 10.46%)</title><rect x="42.4837%" y="613" width="10.4575%" height="15" fill="rgb(233,208,19)" fg:x="65" fg:w="16"/><text x="42.7337%" y="623.50">hex::decode</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (16 samples, 10.46%)</title><rect x="42.4837%" y="597" width="10.4575%" height="15" fill="rgb(216,164,2)" fg:x="65" fg:w="16"/><text x="42.7337%" y="607.50">&lt;alloc::vec::Ve..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 10.46%)</title><rect x="42.4837%" y="581" width="10.4575%" height="15" fill="rgb(220,129,5)" fg:x="65" fg:w="16"/><text x="42.7337%" y="591.50">core::iter::tra..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (16 samples, 10.46%)</title><rect x="42.4837%" y="565" width="10.4575%" height="15" fill="rgb(242,17,10)" fg:x="65" fg:w="16"/><text x="42.7337%" y="575.50">&lt;core::result::..</text></g><g><title>core::iter::adapters::try_process (16 samples, 10.46%)</title><rect x="42.4837%" y="549" width="10.4575%" height="15" fill="rgb(242,107,0)" fg:x="65" fg:w="16"/><text x="42.7337%" y="559.50">core::iter::ada..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (16 samples, 10.46%)</title><rect x="42.4837%" y="533" width="10.4575%" height="15" fill="rgb(251,28,31)" fg:x="65" fg:w="16"/><text x="42.7337%" y="543.50">&lt;core::result::..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 10.46%)</title><rect x="42.4837%" y="517" width="10.4575%" height="15" fill="rgb(233,223,10)" fg:x="65" fg:w="16"/><text x="42.7337%" y="527.50">core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 10.46%)</title><rect x="42.4837%" y="501" width="10.4575%" height="15" fill="rgb(215,21,27)" fg:x="65" fg:w="16"/><text x="42.7337%" y="511.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 9.80%)</title><rect x="43.1373%" y="485" width="9.8039%" height="15" fill="rgb(232,23,21)" fg:x="66" fg:w="15"/><text x="43.3873%" y="495.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15 samples, 9.80%)</title><rect x="43.1373%" y="469" width="9.8039%" height="15" fill="rgb(244,5,23)" fg:x="66" fg:w="15"/><text x="43.3873%" y="479.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 9.80%)</title><rect x="43.1373%" y="453" width="9.8039%" height="15" fill="rgb(226,81,46)" fg:x="66" fg:w="15"/><text x="43.3873%" y="463.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (15 samples, 9.80%)</title><rect x="43.1373%" y="437" width="9.8039%" height="15" fill="rgb(247,70,30)" fg:x="66" fg:w="15"/><text x="43.3873%" y="447.50">alloc::vec::Ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (12 samples, 7.84%)</title><rect x="45.0980%" y="421" width="7.8431%" height="15" fill="rgb(212,68,19)" fg:x="69" fg:w="12"/><text x="45.3480%" y="431.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 7.84%)</title><rect x="45.0980%" y="405" width="7.8431%" height="15" fill="rgb(240,187,13)" fg:x="69" fg:w="12"/><text x="45.3480%" y="415.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 7.84%)</title><rect x="45.0980%" y="389" width="7.8431%" height="15" fill="rgb(223,113,26)" fg:x="69" fg:w="12"/><text x="45.3480%" y="399.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 7.84%)</title><rect x="45.0980%" y="373" width="7.8431%" height="15" fill="rgb(206,192,2)" fg:x="69" fg:w="12"/><text x="45.3480%" y="383.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 7.84%)</title><rect x="45.0980%" y="357" width="7.8431%" height="15" fill="rgb(241,108,4)" fg:x="69" fg:w="12"/><text x="45.3480%" y="367.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 7.84%)</title><rect x="45.0980%" y="341" width="7.8431%" height="15" fill="rgb(247,173,49)" fg:x="69" fg:w="12"/><text x="45.3480%" y="351.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 7.84%)</title><rect x="45.0980%" y="325" width="7.8431%" height="15" fill="rgb(224,114,35)" fg:x="69" fg:w="12"/><text x="45.3480%" y="335.50">alloc::allo..</text></g><g><title>alloc::alloc::realloc (12 samples, 7.84%)</title><rect x="45.0980%" y="309" width="7.8431%" height="15" fill="rgb(245,159,27)" fg:x="69" fg:w="12"/><text x="45.3480%" y="319.50">alloc::allo..</text></g><g><title>__GI___libc_realloc (10 samples, 6.54%)</title><rect x="46.4052%" y="293" width="6.5359%" height="15" fill="rgb(245,172,44)" fg:x="71" fg:w="10"/><text x="46.6552%" y="303.50">__GI___li..</text></g><g><title>__lll_lock_wait_private (10 samples, 6.54%)</title><rect x="46.4052%" y="277" width="6.5359%" height="15" fill="rgb(236,23,11)" fg:x="71" fg:w="10"/><text x="46.6552%" y="287.50">__lll_loc..</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="261" width="6.5359%" height="15" fill="rgb(205,117,38)" fg:x="71" fg:w="10"/><text x="46.6552%" y="271.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="245" width="6.5359%" height="15" fill="rgb(237,72,25)" fg:x="71" fg:w="10"/><text x="46.6552%" y="255.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="229" width="6.5359%" height="15" fill="rgb(244,70,9)" fg:x="71" fg:w="10"/><text x="46.6552%" y="239.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="213" width="6.5359%" height="15" fill="rgb(217,125,39)" fg:x="71" fg:w="10"/><text x="46.6552%" y="223.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="197" width="6.5359%" height="15" fill="rgb(235,36,10)" fg:x="71" fg:w="10"/><text x="46.6552%" y="207.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="181" width="6.5359%" height="15" fill="rgb(251,123,47)" fg:x="71" fg:w="10"/><text x="46.6552%" y="191.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="165" width="6.5359%" height="15" fill="rgb(221,13,13)" fg:x="71" fg:w="10"/><text x="46.6552%" y="175.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="149" width="6.5359%" height="15" fill="rgb(238,131,9)" fg:x="71" fg:w="10"/><text x="46.6552%" y="159.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="133" width="6.5359%" height="15" fill="rgb(211,50,8)" fg:x="71" fg:w="10"/><text x="46.6552%" y="143.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="117" width="6.5359%" height="15" fill="rgb(245,182,24)" fg:x="71" fg:w="10"/><text x="46.6552%" y="127.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="101" width="6.5359%" height="15" fill="rgb(242,14,37)" fg:x="71" fg:w="10"/><text x="46.6552%" y="111.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="85" width="6.5359%" height="15" fill="rgb(246,228,12)" fg:x="71" fg:w="10"/><text x="46.6552%" y="95.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="69" width="6.5359%" height="15" fill="rgb(213,55,15)" fg:x="71" fg:w="10"/><text x="46.6552%" y="79.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="46.4052%" y="53" width="6.5359%" height="15" fill="rgb(209,9,3)" fg:x="71" fg:w="10"/><text x="46.6552%" y="63.50">[unknown]</text></g><g><title>lab4::package::PackageDownloader::run (17 samples, 11.11%)</title><rect x="42.4837%" y="645" width="11.1111%" height="15" fill="rgb(230,59,30)" fg:x="65" fg:w="17"/><text x="42.7337%" y="655.50">lab4::package::P..</text></g><g><title>lab4::checksum::Checksum::with_sha256 (1 samples, 0.65%)</title><rect x="52.9412%" y="629" width="0.6536%" height="15" fill="rgb(209,121,21)" fg:x="81" fg:w="1"/><text x="53.1912%" y="639.50"></text></g><g><title>hex::encode (1 samples, 0.65%)</title><rect x="52.9412%" y="613" width="0.6536%" height="15" fill="rgb(220,109,13)" fg:x="81" fg:w="1"/><text x="53.1912%" y="623.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (1 samples, 0.65%)</title><rect x="52.9412%" y="597" width="0.6536%" height="15" fill="rgb(232,18,1)" fg:x="81" fg:w="1"/><text x="53.1912%" y="607.50"></text></g><g><title>hex::encode_to_iter (1 samples, 0.65%)</title><rect x="52.9412%" y="581" width="0.6536%" height="15" fill="rgb(215,41,42)" fg:x="81" fg:w="1"/><text x="53.1912%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.65%)</title><rect x="52.9412%" y="565" width="0.6536%" height="15" fill="rgb(224,123,36)" fg:x="81" fg:w="1"/><text x="53.1912%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.65%)</title><rect x="52.9412%" y="549" width="0.6536%" height="15" fill="rgb(240,125,3)" fg:x="81" fg:w="1"/><text x="53.1912%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.65%)</title><rect x="52.9412%" y="533" width="0.6536%" height="15" fill="rgb(205,98,50)" fg:x="81" fg:w="1"/><text x="53.1912%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.65%)</title><rect x="52.9412%" y="517" width="0.6536%" height="15" fill="rgb(205,185,37)" fg:x="81" fg:w="1"/><text x="53.1912%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.65%)</title><rect x="52.9412%" y="501" width="0.6536%" height="15" fill="rgb(238,207,15)" fg:x="81" fg:w="1"/><text x="53.1912%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.65%)</title><rect x="52.9412%" y="485" width="0.6536%" height="15" fill="rgb(213,199,42)" fg:x="81" fg:w="1"/><text x="53.1912%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (1 samples, 0.65%)</title><rect x="52.9412%" y="469" width="0.6536%" height="15" fill="rgb(235,201,11)" fg:x="81" fg:w="1"/><text x="53.1912%" y="479.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.65%)</title><rect x="52.9412%" y="453" width="0.6536%" height="15" fill="rgb(207,46,11)" fg:x="81" fg:w="1"/><text x="53.1912%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.65%)</title><rect x="52.9412%" y="437" width="0.6536%" height="15" fill="rgb(241,35,35)" fg:x="81" fg:w="1"/><text x="53.1912%" y="447.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (5 samples, 3.27%)</title><rect x="53.5948%" y="629" width="3.2680%" height="15" fill="rgb(243,32,47)" fg:x="82" fg:w="5"/><text x="53.8448%" y="639.50">cro..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (5 samples, 3.27%)</title><rect x="53.5948%" y="613" width="3.2680%" height="15" fill="rgb(247,202,23)" fg:x="82" fg:w="5"/><text x="53.8448%" y="623.50">cro..</text></g><g><title>crossbeam_channel::context::Context::with (5 samples, 3.27%)</title><rect x="53.5948%" y="597" width="3.2680%" height="15" fill="rgb(219,102,11)" fg:x="82" fg:w="5"/><text x="53.8448%" y="607.50">cro..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 3.27%)</title><rect x="53.5948%" y="581" width="3.2680%" height="15" fill="rgb(243,110,44)" fg:x="82" fg:w="5"/><text x="53.8448%" y="591.50">std..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (5 samples, 3.27%)</title><rect x="53.5948%" y="565" width="3.2680%" height="15" fill="rgb(222,74,54)" fg:x="82" fg:w="5"/><text x="53.8448%" y="575.50">cro..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (5 samples, 3.27%)</title><rect x="53.5948%" y="549" width="3.2680%" height="15" fill="rgb(216,99,12)" fg:x="82" fg:w="5"/><text x="53.8448%" y="559.50">cro..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (5 samples, 3.27%)</title><rect x="53.5948%" y="533" width="3.2680%" height="15" fill="rgb(226,22,26)" fg:x="82" fg:w="5"/><text x="53.8448%" y="543.50">cro..</text></g><g><title>crossbeam_channel::context::Context::wait_until (5 samples, 3.27%)</title><rect x="53.5948%" y="517" width="3.2680%" height="15" fill="rgb(217,163,10)" fg:x="82" fg:w="5"/><text x="53.8448%" y="527.50">cro..</text></g><g><title>std::thread::park (5 samples, 3.27%)</title><rect x="53.5948%" y="501" width="3.2680%" height="15" fill="rgb(213,25,53)" fg:x="82" fg:w="5"/><text x="53.8448%" y="511.50">std..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (5 samples, 3.27%)</title><rect x="53.5948%" y="485" width="3.2680%" height="15" fill="rgb(252,105,26)" fg:x="82" fg:w="5"/><text x="53.8448%" y="495.50">std..</text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 3.27%)</title><rect x="53.5948%" y="469" width="3.2680%" height="15" fill="rgb(220,39,43)" fg:x="82" fg:w="5"/><text x="53.8448%" y="479.50">std..</text></g><g><title>syscall (5 samples, 3.27%)</title><rect x="53.5948%" y="453" width="3.2680%" height="15" fill="rgb(229,68,48)" fg:x="82" fg:w="5"/><text x="53.8448%" y="463.50">sys..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="437" width="3.2680%" height="15" fill="rgb(252,8,32)" fg:x="82" fg:w="5"/><text x="53.8448%" y="447.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="421" width="3.2680%" height="15" fill="rgb(223,20,43)" fg:x="82" fg:w="5"/><text x="53.8448%" y="431.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="405" width="3.2680%" height="15" fill="rgb(229,81,49)" fg:x="82" fg:w="5"/><text x="53.8448%" y="415.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="389" width="3.2680%" height="15" fill="rgb(236,28,36)" fg:x="82" fg:w="5"/><text x="53.8448%" y="399.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="373" width="3.2680%" height="15" fill="rgb(249,185,26)" fg:x="82" fg:w="5"/><text x="53.8448%" y="383.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="357" width="3.2680%" height="15" fill="rgb(249,174,33)" fg:x="82" fg:w="5"/><text x="53.8448%" y="367.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="341" width="3.2680%" height="15" fill="rgb(233,201,37)" fg:x="82" fg:w="5"/><text x="53.8448%" y="351.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="325" width="3.2680%" height="15" fill="rgb(221,78,26)" fg:x="82" fg:w="5"/><text x="53.8448%" y="335.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="309" width="3.2680%" height="15" fill="rgb(250,127,30)" fg:x="82" fg:w="5"/><text x="53.8448%" y="319.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="293" width="3.2680%" height="15" fill="rgb(230,49,44)" fg:x="82" fg:w="5"/><text x="53.8448%" y="303.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="277" width="3.2680%" height="15" fill="rgb(229,67,23)" fg:x="82" fg:w="5"/><text x="53.8448%" y="287.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="261" width="3.2680%" height="15" fill="rgb(249,83,47)" fg:x="82" fg:w="5"/><text x="53.8448%" y="271.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="245" width="3.2680%" height="15" fill="rgb(215,43,3)" fg:x="82" fg:w="5"/><text x="53.8448%" y="255.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="53.5948%" y="229" width="3.2680%" height="15" fill="rgb(238,154,13)" fg:x="82" fg:w="5"/><text x="53.8448%" y="239.50">[un..</text></g><g><title>lab4::print_jobs (8 samples, 5.23%)</title><rect x="53.5948%" y="645" width="5.2288%" height="15" fill="rgb(219,56,2)" fg:x="82" fg:w="8"/><text x="53.8448%" y="655.50">lab4::..</text></g><g><title>std::io::stdio::_print (3 samples, 1.96%)</title><rect x="56.8627%" y="629" width="1.9608%" height="15" fill="rgb(233,0,4)" fg:x="87" fg:w="3"/><text x="57.1127%" y="639.50">s..</text></g><g><title>std::io::stdio::print_to (3 samples, 1.96%)</title><rect x="56.8627%" y="613" width="1.9608%" height="15" fill="rgb(235,30,7)" fg:x="87" fg:w="3"/><text x="57.1127%" y="623.50">s..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 1.96%)</title><rect x="56.8627%" y="597" width="1.9608%" height="15" fill="rgb(250,79,13)" fg:x="87" fg:w="3"/><text x="57.1127%" y="607.50">&lt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 1.96%)</title><rect x="56.8627%" y="581" width="1.9608%" height="15" fill="rgb(211,146,34)" fg:x="87" fg:w="3"/><text x="57.1127%" y="591.50">&lt;..</text></g><g><title>std::io::Write::write_fmt (3 samples, 1.96%)</title><rect x="56.8627%" y="565" width="1.9608%" height="15" fill="rgb(228,22,38)" fg:x="87" fg:w="3"/><text x="57.1127%" y="575.50">s..</text></g><g><title>core::fmt::write (3 samples, 1.96%)</title><rect x="56.8627%" y="549" width="1.9608%" height="15" fill="rgb(235,168,5)" fg:x="87" fg:w="3"/><text x="57.1127%" y="559.50">c..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 1.31%)</title><rect x="57.5163%" y="533" width="1.3072%" height="15" fill="rgb(221,155,16)" fg:x="88" fg:w="2"/><text x="57.7663%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 1.31%)</title><rect x="57.5163%" y="517" width="1.3072%" height="15" fill="rgb(215,215,53)" fg:x="88" fg:w="2"/><text x="57.7663%" y="527.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 1.31%)</title><rect x="57.5163%" y="501" width="1.3072%" height="15" fill="rgb(223,4,10)" fg:x="88" fg:w="2"/><text x="57.7663%" y="511.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 1.31%)</title><rect x="57.5163%" y="485" width="1.3072%" height="15" fill="rgb(234,103,6)" fg:x="88" fg:w="2"/><text x="57.7663%" y="495.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 1.31%)</title><rect x="57.5163%" y="469" width="1.3072%" height="15" fill="rgb(227,97,0)" fg:x="88" fg:w="2"/><text x="57.7663%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (2 samples, 1.31%)</title><rect x="57.5163%" y="453" width="1.3072%" height="15" fill="rgb(234,150,53)" fg:x="88" fg:w="2"/><text x="57.7663%" y="463.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (2 samples, 1.31%)</title><rect x="57.5163%" y="437" width="1.3072%" height="15" fill="rgb(228,201,54)" fg:x="88" fg:w="2"/><text x="57.7663%" y="447.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 1.31%)</title><rect x="57.5163%" y="421" width="1.3072%" height="15" fill="rgb(222,22,37)" fg:x="88" fg:w="2"/><text x="57.7663%" y="431.50"></text></g><g><title>__libc_write (2 samples, 1.31%)</title><rect x="57.5163%" y="405" width="1.3072%" height="15" fill="rgb(237,53,32)" fg:x="88" fg:w="2"/><text x="57.7663%" y="415.50"></text></g><g><title>__libc_write (2 samples, 1.31%)</title><rect x="57.5163%" y="389" width="1.3072%" height="15" fill="rgb(233,25,53)" fg:x="88" fg:w="2"/><text x="57.7663%" y="399.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="373" width="1.3072%" height="15" fill="rgb(210,40,34)" fg:x="88" fg:w="2"/><text x="57.7663%" y="383.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="357" width="1.3072%" height="15" fill="rgb(241,220,44)" fg:x="88" fg:w="2"/><text x="57.7663%" y="367.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="341" width="1.3072%" height="15" fill="rgb(235,28,35)" fg:x="88" fg:w="2"/><text x="57.7663%" y="351.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="325" width="1.3072%" height="15" fill="rgb(210,56,17)" fg:x="88" fg:w="2"/><text x="57.7663%" y="335.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="309" width="1.3072%" height="15" fill="rgb(224,130,29)" fg:x="88" fg:w="2"/><text x="57.7663%" y="319.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="293" width="1.3072%" height="15" fill="rgb(235,212,8)" fg:x="88" fg:w="2"/><text x="57.7663%" y="303.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="277" width="1.3072%" height="15" fill="rgb(223,33,50)" fg:x="88" fg:w="2"/><text x="57.7663%" y="287.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="261" width="1.3072%" height="15" fill="rgb(219,149,13)" fg:x="88" fg:w="2"/><text x="57.7663%" y="271.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="57.5163%" y="245" width="1.3072%" height="15" fill="rgb(250,156,29)" fg:x="88" fg:w="2"/><text x="57.7663%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="58.1699%" y="229" width="0.6536%" height="15" fill="rgb(216,193,19)" fg:x="89" fg:w="1"/><text x="58.4199%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="58.1699%" y="213" width="0.6536%" height="15" fill="rgb(216,135,14)" fg:x="89" fg:w="1"/><text x="58.4199%" y="223.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::is_empty (2 samples, 1.31%)</title><rect x="59.4771%" y="629" width="1.3072%" height="15" fill="rgb(241,47,5)" fg:x="91" fg:w="2"/><text x="59.7271%" y="639.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::is_empty (1 samples, 0.65%)</title><rect x="60.1307%" y="613" width="0.6536%" height="15" fill="rgb(233,42,35)" fg:x="92" fg:w="1"/><text x="60.3807%" y="623.50"></text></g><g><title>&lt;crossbeam_channel::counter::Receiver&lt;C&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.65%)</title><rect x="61.4379%" y="613" width="0.6536%" height="15" fill="rgb(231,13,6)" fg:x="94" fg:w="1"/><text x="61.6879%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.65%)</title><rect x="62.0915%" y="581" width="0.6536%" height="15" fill="rgb(207,181,40)" fg:x="95" fg:w="1"/><text x="62.3415%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.65%)</title><rect x="62.0915%" y="565" width="0.6536%" height="15" fill="rgb(254,173,49)" fg:x="95" fg:w="1"/><text x="62.3415%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 4.58%)</title><rect x="62.7451%" y="581" width="4.5752%" height="15" fill="rgb(221,1,38)" fg:x="96" fg:w="7"/><text x="62.9951%" y="591.50">core:..</text></g><g><title>core::sync::atomic::atomic_load (7 samples, 4.58%)</title><rect x="62.7451%" y="565" width="4.5752%" height="15" fill="rgb(206,124,46)" fg:x="96" fg:w="7"/><text x="62.9951%" y="575.50">core:..</text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (21 samples, 13.73%)</title><rect x="60.7843%" y="629" width="13.7255%" height="15" fill="rgb(249,21,11)" fg:x="93" fg:w="21"/><text x="61.0343%" y="639.50">crossbeam_channel::ch..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::try_recv (19 samples, 12.42%)</title><rect x="62.0915%" y="613" width="12.4183%" height="15" fill="rgb(222,201,40)" fg:x="95" fg:w="19"/><text x="62.3415%" y="623.50">crossbeam_channel::..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (19 samples, 12.42%)</title><rect x="62.0915%" y="597" width="12.4183%" height="15" fill="rgb(235,61,29)" fg:x="95" fg:w="19"/><text x="62.3415%" y="607.50">crossbeam_channel::..</text></g><g><title>core::sync::atomic::fence (11 samples, 7.19%)</title><rect x="67.3203%" y="581" width="7.1895%" height="15" fill="rgb(219,207,3)" fg:x="103" fg:w="11"/><text x="67.5703%" y="591.50">core::sync..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.31%)</title><rect x="74.5098%" y="405" width="1.3072%" height="15" fill="rgb(222,56,46)" fg:x="114" fg:w="2"/><text x="74.7598%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 1.31%)</title><rect x="74.5098%" y="389" width="1.3072%" height="15" fill="rgb(239,76,54)" fg:x="114" fg:w="2"/><text x="74.7598%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.31%)</title><rect x="74.5098%" y="373" width="1.3072%" height="15" fill="rgb(231,124,27)" fg:x="114" fg:w="2"/><text x="74.7598%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.31%)</title><rect x="74.5098%" y="357" width="1.3072%" height="15" fill="rgb(249,195,6)" fg:x="114" fg:w="2"/><text x="74.7598%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.31%)</title><rect x="74.5098%" y="341" width="1.3072%" height="15" fill="rgb(237,174,47)" fg:x="114" fg:w="2"/><text x="74.7598%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 1.31%)</title><rect x="74.5098%" y="325" width="1.3072%" height="15" fill="rgb(206,201,31)" fg:x="114" fg:w="2"/><text x="74.7598%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (2 samples, 1.31%)</title><rect x="74.5098%" y="309" width="1.3072%" height="15" fill="rgb(231,57,52)" fg:x="114" fg:w="2"/><text x="74.7598%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (2 samples, 1.31%)</title><rect x="74.5098%" y="293" width="1.3072%" height="15" fill="rgb(248,177,22)" fg:x="114" fg:w="2"/><text x="74.7598%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (2 samples, 1.31%)</title><rect x="74.5098%" y="277" width="1.3072%" height="15" fill="rgb(215,211,37)" fg:x="114" fg:w="2"/><text x="74.7598%" y="287.50"></text></g><g><title>hex::val (2 samples, 1.31%)</title><rect x="74.5098%" y="261" width="1.3072%" height="15" fill="rgb(241,128,51)" fg:x="114" fg:w="2"/><text x="74.7598%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 6.54%)</title><rect x="74.5098%" y="437" width="6.5359%" height="15" fill="rgb(227,165,31)" fg:x="114" fg:w="10"/><text x="74.7598%" y="447.50">&lt;alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (10 samples, 6.54%)</title><rect x="74.5098%" y="421" width="6.5359%" height="15" fill="rgb(228,167,24)" fg:x="114" fg:w="10"/><text x="74.7598%" y="431.50">alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 5.23%)</title><rect x="75.8170%" y="405" width="5.2288%" height="15" fill="rgb(228,143,12)" fg:x="116" fg:w="8"/><text x="76.0670%" y="415.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 5.23%)</title><rect x="75.8170%" y="389" width="5.2288%" height="15" fill="rgb(249,149,8)" fg:x="116" fg:w="8"/><text x="76.0670%" y="399.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 5.23%)</title><rect x="75.8170%" y="373" width="5.2288%" height="15" fill="rgb(243,35,44)" fg:x="116" fg:w="8"/><text x="76.0670%" y="383.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 5.23%)</title><rect x="75.8170%" y="357" width="5.2288%" height="15" fill="rgb(246,89,9)" fg:x="116" fg:w="8"/><text x="76.0670%" y="367.50">alloc:..</text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 5.23%)</title><rect x="75.8170%" y="341" width="5.2288%" height="15" fill="rgb(233,213,13)" fg:x="116" fg:w="8"/><text x="76.0670%" y="351.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 5.23%)</title><rect x="75.8170%" y="325" width="5.2288%" height="15" fill="rgb(233,141,41)" fg:x="116" fg:w="8"/><text x="76.0670%" y="335.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 5.23%)</title><rect x="75.8170%" y="309" width="5.2288%" height="15" fill="rgb(239,167,4)" fg:x="116" fg:w="8"/><text x="76.0670%" y="319.50">alloc:..</text></g><g><title>alloc::alloc::realloc (8 samples, 5.23%)</title><rect x="75.8170%" y="293" width="5.2288%" height="15" fill="rgb(209,217,16)" fg:x="116" fg:w="8"/><text x="76.0670%" y="303.50">alloc:..</text></g><g><title>__GI___libc_realloc (8 samples, 5.23%)</title><rect x="75.8170%" y="277" width="5.2288%" height="15" fill="rgb(219,88,35)" fg:x="116" fg:w="8"/><text x="76.0670%" y="287.50">__GI__..</text></g><g><title>__lll_lock_wait_private (6 samples, 3.92%)</title><rect x="77.1242%" y="261" width="3.9216%" height="15" fill="rgb(220,193,23)" fg:x="118" fg:w="6"/><text x="77.3742%" y="271.50">__ll..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="77.1242%" y="245" width="3.9216%" height="15" fill="rgb(230,90,52)" fg:x="118" fg:w="6"/><text x="77.3742%" y="255.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="77.1242%" y="229" width="3.9216%" height="15" fill="rgb(252,106,19)" fg:x="118" fg:w="6"/><text x="77.3742%" y="239.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="77.1242%" y="213" width="3.9216%" height="15" fill="rgb(206,74,20)" fg:x="118" fg:w="6"/><text x="77.3742%" y="223.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="197" width="3.2680%" height="15" fill="rgb(230,138,44)" fg:x="119" fg:w="5"/><text x="78.0278%" y="207.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="181" width="3.2680%" height="15" fill="rgb(235,182,43)" fg:x="119" fg:w="5"/><text x="78.0278%" y="191.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="165" width="3.2680%" height="15" fill="rgb(242,16,51)" fg:x="119" fg:w="5"/><text x="78.0278%" y="175.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="149" width="3.2680%" height="15" fill="rgb(248,9,4)" fg:x="119" fg:w="5"/><text x="78.0278%" y="159.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="133" width="3.2680%" height="15" fill="rgb(210,31,22)" fg:x="119" fg:w="5"/><text x="78.0278%" y="143.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="117" width="3.2680%" height="15" fill="rgb(239,54,39)" fg:x="119" fg:w="5"/><text x="78.0278%" y="127.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="101" width="3.2680%" height="15" fill="rgb(230,99,41)" fg:x="119" fg:w="5"/><text x="78.0278%" y="111.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="85" width="3.2680%" height="15" fill="rgb(253,106,12)" fg:x="119" fg:w="5"/><text x="78.0278%" y="95.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="69" width="3.2680%" height="15" fill="rgb(213,46,41)" fg:x="119" fg:w="5"/><text x="78.0278%" y="79.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="53" width="3.2680%" height="15" fill="rgb(215,133,35)" fg:x="119" fg:w="5"/><text x="78.0278%" y="63.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="77.7778%" y="37" width="3.2680%" height="15" fill="rgb(213,28,5)" fg:x="119" fg:w="5"/><text x="78.0278%" y="47.50">[un..</text></g><g><title>lab4::checksum::Checksum::update (11 samples, 7.19%)</title><rect x="74.5098%" y="613" width="7.1895%" height="15" fill="rgb(215,77,49)" fg:x="114" fg:w="11"/><text x="74.7598%" y="623.50">lab4::chec..</text></g><g><title>hex::decode (11 samples, 7.19%)</title><rect x="74.5098%" y="597" width="7.1895%" height="15" fill="rgb(248,100,22)" fg:x="114" fg:w="11"/><text x="74.7598%" y="607.50">hex::decode</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (11 samples, 7.19%)</title><rect x="74.5098%" y="581" width="7.1895%" height="15" fill="rgb(208,67,9)" fg:x="114" fg:w="11"/><text x="74.7598%" y="591.50">&lt;alloc::ve..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 7.19%)</title><rect x="74.5098%" y="565" width="7.1895%" height="15" fill="rgb(219,133,21)" fg:x="114" fg:w="11"/><text x="74.7598%" y="575.50">core::iter..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (11 samples, 7.19%)</title><rect x="74.5098%" y="549" width="7.1895%" height="15" fill="rgb(246,46,29)" fg:x="114" fg:w="11"/><text x="74.7598%" y="559.50">&lt;core::res..</text></g><g><title>core::iter::adapters::try_process (11 samples, 7.19%)</title><rect x="74.5098%" y="533" width="7.1895%" height="15" fill="rgb(246,185,52)" fg:x="114" fg:w="11"/><text x="74.7598%" y="543.50">core::iter..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (11 samples, 7.19%)</title><rect x="74.5098%" y="517" width="7.1895%" height="15" fill="rgb(252,136,11)" fg:x="114" fg:w="11"/><text x="74.7598%" y="527.50">&lt;core::res..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 7.19%)</title><rect x="74.5098%" y="501" width="7.1895%" height="15" fill="rgb(219,138,53)" fg:x="114" fg:w="11"/><text x="74.7598%" y="511.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 7.19%)</title><rect x="74.5098%" y="485" width="7.1895%" height="15" fill="rgb(211,51,23)" fg:x="114" fg:w="11"/><text x="74.7598%" y="495.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 7.19%)</title><rect x="74.5098%" y="469" width="7.1895%" height="15" fill="rgb(247,221,28)" fg:x="114" fg:w="11"/><text x="74.7598%" y="479.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (11 samples, 7.19%)</title><rect x="74.5098%" y="453" width="7.1895%" height="15" fill="rgb(251,222,45)" fg:x="114" fg:w="11"/><text x="74.7598%" y="463.50">&lt;alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.65%)</title><rect x="81.0458%" y="437" width="0.6536%" height="15" fill="rgb(217,162,53)" fg:x="124" fg:w="1"/><text x="81.2958%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.65%)</title><rect x="81.0458%" y="421" width="0.6536%" height="15" fill="rgb(229,93,14)" fg:x="124" fg:w="1"/><text x="81.2958%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.65%)</title><rect x="81.0458%" y="405" width="0.6536%" height="15" fill="rgb(209,67,49)" fg:x="124" fg:w="1"/><text x="81.2958%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.65%)</title><rect x="81.0458%" y="389" width="0.6536%" height="15" fill="rgb(213,87,29)" fg:x="124" fg:w="1"/><text x="81.2958%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.65%)</title><rect x="81.0458%" y="373" width="0.6536%" height="15" fill="rgb(205,151,52)" fg:x="124" fg:w="1"/><text x="81.2958%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.65%)</title><rect x="81.0458%" y="357" width="0.6536%" height="15" fill="rgb(253,215,39)" fg:x="124" fg:w="1"/><text x="81.2958%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.65%)</title><rect x="81.0458%" y="341" width="0.6536%" height="15" fill="rgb(221,220,41)" fg:x="124" fg:w="1"/><text x="81.2958%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.65%)</title><rect x="81.0458%" y="325" width="0.6536%" height="15" fill="rgb(218,133,21)" fg:x="124" fg:w="1"/><text x="81.2958%" y="335.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (1 samples, 0.65%)</title><rect x="81.6993%" y="597" width="0.6536%" height="15" fill="rgb(221,193,43)" fg:x="125" fg:w="1"/><text x="81.9493%" y="607.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (1 samples, 0.65%)</title><rect x="81.6993%" y="581" width="0.6536%" height="15" fill="rgb(240,128,52)" fg:x="125" fg:w="1"/><text x="81.9493%" y="591.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (1 samples, 0.65%)</title><rect x="81.6993%" y="565" width="0.6536%" height="15" fill="rgb(253,114,12)" fg:x="125" fg:w="1"/><text x="81.9493%" y="575.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (1 samples, 0.65%)</title><rect x="81.6993%" y="549" width="0.6536%" height="15" fill="rgb(215,223,47)" fg:x="125" fg:w="1"/><text x="81.9493%" y="559.50"></text></g><g><title>sha2::sha256::Engine256::finish (1 samples, 0.65%)</title><rect x="81.6993%" y="533" width="0.6536%" height="15" fill="rgb(248,225,23)" fg:x="125" fg:w="1"/><text x="81.9493%" y="543.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (1 samples, 0.65%)</title><rect x="81.6993%" y="517" width="0.6536%" height="15" fill="rgb(250,108,0)" fg:x="125" fg:w="1"/><text x="81.9493%" y="527.50"></text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (1 samples, 0.65%)</title><rect x="81.6993%" y="501" width="0.6536%" height="15" fill="rgb(228,208,7)" fg:x="125" fg:w="1"/><text x="81.9493%" y="511.50"></text></g><g><title>sha2::sha256::compress256 (1 samples, 0.65%)</title><rect x="81.6993%" y="485" width="0.6536%" height="15" fill="rgb(244,45,10)" fg:x="125" fg:w="1"/><text x="81.9493%" y="495.50"></text></g><g><title>sha2::sha256::x86::compress (1 samples, 0.65%)</title><rect x="81.6993%" y="469" width="0.6536%" height="15" fill="rgb(207,125,25)" fg:x="125" fg:w="1"/><text x="81.9493%" y="479.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.65%)</title><rect x="81.6993%" y="453" width="0.6536%" height="15" fill="rgb(210,195,18)" fg:x="125" fg:w="1"/><text x="81.9493%" y="463.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.65%)</title><rect x="81.6993%" y="437" width="0.6536%" height="15" fill="rgb(249,80,12)" fg:x="125" fg:w="1"/><text x="81.9493%" y="447.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.65%)</title><rect x="81.6993%" y="421" width="0.6536%" height="15" fill="rgb(221,65,9)" fg:x="125" fg:w="1"/><text x="81.9493%" y="431.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (1 samples, 0.65%)</title><rect x="81.6993%" y="405" width="0.6536%" height="15" fill="rgb(235,49,36)" fg:x="125" fg:w="1"/><text x="81.9493%" y="415.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.65%)</title><rect x="82.3529%" y="469" width="0.6536%" height="15" fill="rgb(225,32,20)" fg:x="126" fg:w="1"/><text x="82.6029%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.65%)</title><rect x="82.3529%" y="453" width="0.6536%" height="15" fill="rgb(215,141,46)" fg:x="126" fg:w="1"/><text x="82.6029%" y="463.50"></text></g><g><title>core::mem::replace (1 samples, 0.65%)</title><rect x="82.3529%" y="437" width="0.6536%" height="15" fill="rgb(250,160,47)" fg:x="126" fg:w="1"/><text x="82.6029%" y="447.50"></text></g><g><title>core::ptr::read (1 samples, 0.65%)</title><rect x="82.3529%" y="421" width="0.6536%" height="15" fill="rgb(216,222,40)" fg:x="126" fg:w="1"/><text x="82.6029%" y="431.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (3 samples, 1.96%)</title><rect x="81.6993%" y="613" width="1.9608%" height="15" fill="rgb(234,217,39)" fg:x="125" fg:w="3"/><text x="81.9493%" y="623.50">l..</text></g><g><title>hex::encode (2 samples, 1.31%)</title><rect x="82.3529%" y="597" width="1.3072%" height="15" fill="rgb(207,178,40)" fg:x="126" fg:w="2"/><text x="82.6029%" y="607.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (2 samples, 1.31%)</title><rect x="82.3529%" y="581" width="1.3072%" height="15" fill="rgb(221,136,13)" fg:x="126" fg:w="2"/><text x="82.6029%" y="591.50"></text></g><g><title>hex::encode_to_iter (2 samples, 1.31%)</title><rect x="82.3529%" y="565" width="1.3072%" height="15" fill="rgb(249,199,10)" fg:x="126" fg:w="2"/><text x="82.6029%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 1.31%)</title><rect x="82.3529%" y="549" width="1.3072%" height="15" fill="rgb(249,222,13)" fg:x="126" fg:w="2"/><text x="82.6029%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (2 samples, 1.31%)</title><rect x="82.3529%" y="533" width="1.3072%" height="15" fill="rgb(244,185,38)" fg:x="126" fg:w="2"/><text x="82.6029%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (2 samples, 1.31%)</title><rect x="82.3529%" y="517" width="1.3072%" height="15" fill="rgb(236,202,9)" fg:x="126" fg:w="2"/><text x="82.6029%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 1.31%)</title><rect x="82.3529%" y="501" width="1.3072%" height="15" fill="rgb(250,229,37)" fg:x="126" fg:w="2"/><text x="82.6029%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 1.31%)</title><rect x="82.3529%" y="485" width="1.3072%" height="15" fill="rgb(206,174,23)" fg:x="126" fg:w="2"/><text x="82.6029%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.65%)</title><rect x="83.0065%" y="469" width="0.6536%" height="15" fill="rgb(211,33,43)" fg:x="127" fg:w="1"/><text x="83.2565%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (1 samples, 0.65%)</title><rect x="83.0065%" y="453" width="0.6536%" height="15" fill="rgb(245,58,50)" fg:x="127" fg:w="1"/><text x="83.2565%" y="463.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.65%)</title><rect x="83.0065%" y="437" width="0.6536%" height="15" fill="rgb(244,68,36)" fg:x="127" fg:w="1"/><text x="83.2565%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.65%)</title><rect x="83.0065%" y="421" width="0.6536%" height="15" fill="rgb(232,229,15)" fg:x="127" fg:w="1"/><text x="83.2565%" y="431.50"></text></g><g><title>core::ptr::write (1 samples, 0.65%)</title><rect x="83.0065%" y="405" width="0.6536%" height="15" fill="rgb(254,30,23)" fg:x="127" fg:w="1"/><text x="83.2565%" y="415.50"></text></g><g><title>std::panic::catch_unwind (77 samples, 50.33%)</title><rect x="41.1765%" y="757" width="50.3268%" height="15" fill="rgb(235,160,14)" fg:x="63" fg:w="77"/><text x="41.4265%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (77 samples, 50.33%)</title><rect x="41.1765%" y="741" width="50.3268%" height="15" fill="rgb(212,155,44)" fg:x="63" fg:w="77"/><text x="41.4265%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (77 samples, 50.33%)</title><rect x="41.1765%" y="725" width="50.3268%" height="15" fill="rgb(226,2,50)" fg:x="63" fg:w="77"/><text x="41.4265%" y="735.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77 samples, 50.33%)</title><rect x="41.1765%" y="709" width="50.3268%" height="15" fill="rgb(234,177,6)" fg:x="63" fg:w="77"/><text x="41.4265%" y="719.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (77 samples, 50.33%)</title><rect x="41.1765%" y="693" width="50.3268%" height="15" fill="rgb(217,24,9)" fg:x="63" fg:w="77"/><text x="41.4265%" y="703.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (77 samples, 50.33%)</title><rect x="41.1765%" y="677" width="50.3268%" height="15" fill="rgb(220,13,46)" fg:x="63" fg:w="77"/><text x="41.4265%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::{{closure}} (77 samples, 50.33%)</title><rect x="41.1765%" y="661" width="50.3268%" height="15" fill="rgb(239,221,27)" fg:x="63" fg:w="77"/><text x="41.4265%" y="671.50">lab4::hackathon::{{closure}}</text></g><g><title>lab4::student::Student::run (50 samples, 32.68%)</title><rect x="58.8235%" y="645" width="32.6797%" height="15" fill="rgb(222,198,25)" fg:x="90" fg:w="50"/><text x="59.0735%" y="655.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (26 samples, 16.99%)</title><rect x="74.5098%" y="629" width="16.9935%" height="15" fill="rgb(211,99,13)" fg:x="114" fg:w="26"/><text x="74.7598%" y="639.50">lab4::student::Student::bu..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 7.84%)</title><rect x="83.6601%" y="613" width="7.8431%" height="15" fill="rgb(232,111,31)" fg:x="128" fg:w="12"/><text x="83.9101%" y="623.50">std::sync::..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (12 samples, 7.84%)</title><rect x="83.6601%" y="597" width="7.8431%" height="15" fill="rgb(245,82,37)" fg:x="128" fg:w="12"/><text x="83.9101%" y="607.50">std::sys::u..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (12 samples, 7.84%)</title><rect x="83.6601%" y="581" width="7.8431%" height="15" fill="rgb(227,149,46)" fg:x="128" fg:w="12"/><text x="83.9101%" y="591.50">std::sys::u..</text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 7.84%)</title><rect x="83.6601%" y="565" width="7.8431%" height="15" fill="rgb(218,36,50)" fg:x="128" fg:w="12"/><text x="83.9101%" y="575.50">std::sys::u..</text></g><g><title>syscall (12 samples, 7.84%)</title><rect x="83.6601%" y="549" width="7.8431%" height="15" fill="rgb(226,80,48)" fg:x="128" fg:w="12"/><text x="83.9101%" y="559.50">syscall</text></g><g><title>[unknown] (12 samples, 7.84%)</title><rect x="83.6601%" y="533" width="7.8431%" height="15" fill="rgb(238,224,15)" fg:x="128" fg:w="12"/><text x="83.9101%" y="543.50">[unknown]</text></g><g><title>[unknown] (12 samples, 7.84%)</title><rect x="83.6601%" y="517" width="7.8431%" height="15" fill="rgb(241,136,10)" fg:x="128" fg:w="12"/><text x="83.9101%" y="527.50">[unknown]</text></g><g><title>[unknown] (12 samples, 7.84%)</title><rect x="83.6601%" y="501" width="7.8431%" height="15" fill="rgb(208,32,45)" fg:x="128" fg:w="12"/><text x="83.9101%" y="511.50">[unknown]</text></g><g><title>[unknown] (12 samples, 7.84%)</title><rect x="83.6601%" y="485" width="7.8431%" height="15" fill="rgb(207,135,9)" fg:x="128" fg:w="12"/><text x="83.9101%" y="495.50">[unknown]</text></g><g><title>[unknown] (12 samples, 7.84%)</title><rect x="83.6601%" y="469" width="7.8431%" height="15" fill="rgb(206,86,44)" fg:x="128" fg:w="12"/><text x="83.9101%" y="479.50">[unknown]</text></g><g><title>[unknown] (12 samples, 7.84%)</title><rect x="83.6601%" y="453" width="7.8431%" height="15" fill="rgb(245,177,15)" fg:x="128" fg:w="12"/><text x="83.9101%" y="463.50">[unknown]</text></g><g><title>[unknown] (11 samples, 7.19%)</title><rect x="84.3137%" y="437" width="7.1895%" height="15" fill="rgb(206,64,50)" fg:x="129" fg:w="11"/><text x="84.5637%" y="447.50">[unknown]</text></g><g><title>[unknown] (11 samples, 7.19%)</title><rect x="84.3137%" y="421" width="7.1895%" height="15" fill="rgb(234,36,40)" fg:x="129" fg:w="11"/><text x="84.5637%" y="431.50">[unknown]</text></g><g><title>[unknown] (11 samples, 7.19%)</title><rect x="84.3137%" y="405" width="7.1895%" height="15" fill="rgb(213,64,8)" fg:x="129" fg:w="11"/><text x="84.5637%" y="415.50">[unknown]</text></g><g><title>[unknown] (11 samples, 7.19%)</title><rect x="84.3137%" y="389" width="7.1895%" height="15" fill="rgb(210,75,36)" fg:x="129" fg:w="11"/><text x="84.5637%" y="399.50">[unknown]</text></g><g><title>[unknown] (11 samples, 7.19%)</title><rect x="84.3137%" y="373" width="7.1895%" height="15" fill="rgb(229,88,21)" fg:x="129" fg:w="11"/><text x="84.5637%" y="383.50">[unknown]</text></g><g><title>[unknown] (11 samples, 7.19%)</title><rect x="84.3137%" y="357" width="7.1895%" height="15" fill="rgb(252,204,47)" fg:x="129" fg:w="11"/><text x="84.5637%" y="367.50">[unknown]</text></g><g><title>[unknown] (11 samples, 7.19%)</title><rect x="84.3137%" y="341" width="7.1895%" height="15" fill="rgb(208,77,27)" fg:x="129" fg:w="11"/><text x="84.5637%" y="351.50">[unknown]</text></g><g><title>[unknown] (10 samples, 6.54%)</title><rect x="84.9673%" y="325" width="6.5359%" height="15" fill="rgb(221,76,26)" fg:x="130" fg:w="10"/><text x="85.2173%" y="335.50">[unknown]</text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="661" width="0.6536%" height="15" fill="rgb(225,139,18)" fg:x="140" fg:w="1"/><text x="91.7533%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="645" width="0.6536%" height="15" fill="rgb(230,137,11)" fg:x="140" fg:w="1"/><text x="91.7533%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="629" width="0.6536%" height="15" fill="rgb(212,28,1)" fg:x="140" fg:w="1"/><text x="91.7533%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="613" width="0.6536%" height="15" fill="rgb(248,164,17)" fg:x="140" fg:w="1"/><text x="91.7533%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="597" width="0.6536%" height="15" fill="rgb(222,171,42)" fg:x="140" fg:w="1"/><text x="91.7533%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="581" width="0.6536%" height="15" fill="rgb(243,84,45)" fg:x="140" fg:w="1"/><text x="91.7533%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="565" width="0.6536%" height="15" fill="rgb(252,49,23)" fg:x="140" fg:w="1"/><text x="91.7533%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="549" width="0.6536%" height="15" fill="rgb(215,19,7)" fg:x="140" fg:w="1"/><text x="91.7533%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="533" width="0.6536%" height="15" fill="rgb(238,81,41)" fg:x="140" fg:w="1"/><text x="91.7533%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="517" width="0.6536%" height="15" fill="rgb(210,199,37)" fg:x="140" fg:w="1"/><text x="91.7533%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="501" width="0.6536%" height="15" fill="rgb(244,192,49)" fg:x="140" fg:w="1"/><text x="91.7533%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="485" width="0.6536%" height="15" fill="rgb(226,211,11)" fg:x="140" fg:w="1"/><text x="91.7533%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="91.5033%" y="469" width="0.6536%" height="15" fill="rgb(236,162,54)" fg:x="140" fg:w="1"/><text x="91.7533%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (79 samples, 51.63%)</title><rect x="41.1765%" y="821" width="51.6340%" height="15" fill="rgb(220,229,9)" fg:x="63" fg:w="79"/><text x="41.4265%" y="831.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (79 samples, 51.63%)</title><rect x="41.1765%" y="805" width="51.6340%" height="15" fill="rgb(250,87,22)" fg:x="63" fg:w="79"/><text x="41.4265%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (79 samples, 51.63%)</title><rect x="41.1765%" y="789" width="51.6340%" height="15" fill="rgb(239,43,17)" fg:x="63" fg:w="79"/><text x="41.4265%" y="799.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (79 samples, 51.63%)</title><rect x="41.1765%" y="773" width="51.6340%" height="15" fill="rgb(231,177,25)" fg:x="63" fg:w="79"/><text x="41.4265%" y="783.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 1.31%)</title><rect x="91.5033%" y="757" width="1.3072%" height="15" fill="rgb(219,179,1)" fg:x="140" fg:w="2"/><text x="91.7533%" y="767.50"></text></g><g><title>pthread_getattr_np (2 samples, 1.31%)</title><rect x="91.5033%" y="741" width="1.3072%" height="15" fill="rgb(238,219,53)" fg:x="140" fg:w="2"/><text x="91.7533%" y="751.50"></text></g><g><title>__GI___libc_malloc (2 samples, 1.31%)</title><rect x="91.5033%" y="725" width="1.3072%" height="15" fill="rgb(232,167,36)" fg:x="140" fg:w="2"/><text x="91.7533%" y="735.50"></text></g><g><title>tcache_init.part.0 (2 samples, 1.31%)</title><rect x="91.5033%" y="709" width="1.3072%" height="15" fill="rgb(244,19,51)" fg:x="140" fg:w="2"/><text x="91.7533%" y="719.50"></text></g><g><title>arena_get2.part.0 (2 samples, 1.31%)</title><rect x="91.5033%" y="693" width="1.3072%" height="15" fill="rgb(224,6,22)" fg:x="140" fg:w="2"/><text x="91.7533%" y="703.50"></text></g><g><title>new_heap (2 samples, 1.31%)</title><rect x="91.5033%" y="677" width="1.3072%" height="15" fill="rgb(224,145,5)" fg:x="140" fg:w="2"/><text x="91.7533%" y="687.50"></text></g><g><title>__GI_munmap (1 samples, 0.65%)</title><rect x="92.1569%" y="661" width="0.6536%" height="15" fill="rgb(234,130,49)" fg:x="141" fg:w="1"/><text x="92.4069%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="645" width="0.6536%" height="15" fill="rgb(254,6,2)" fg:x="141" fg:w="1"/><text x="92.4069%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="629" width="0.6536%" height="15" fill="rgb(208,96,46)" fg:x="141" fg:w="1"/><text x="92.4069%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="613" width="0.6536%" height="15" fill="rgb(239,3,39)" fg:x="141" fg:w="1"/><text x="92.4069%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="597" width="0.6536%" height="15" fill="rgb(233,210,1)" fg:x="141" fg:w="1"/><text x="92.4069%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="581" width="0.6536%" height="15" fill="rgb(244,137,37)" fg:x="141" fg:w="1"/><text x="92.4069%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="565" width="0.6536%" height="15" fill="rgb(240,136,2)" fg:x="141" fg:w="1"/><text x="92.4069%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="549" width="0.6536%" height="15" fill="rgb(239,18,37)" fg:x="141" fg:w="1"/><text x="92.4069%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="533" width="0.6536%" height="15" fill="rgb(218,185,22)" fg:x="141" fg:w="1"/><text x="92.4069%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="517" width="0.6536%" height="15" fill="rgb(225,218,4)" fg:x="141" fg:w="1"/><text x="92.4069%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.1569%" y="501" width="0.6536%" height="15" fill="rgb(230,182,32)" fg:x="141" fg:w="1"/><text x="92.4069%" y="511.50"></text></g><g><title>__sigaltstack (1 samples, 0.65%)</title><rect x="92.8105%" y="789" width="0.6536%" height="15" fill="rgb(242,56,43)" fg:x="142" fg:w="1"/><text x="93.0605%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="92.8105%" y="773" width="0.6536%" height="15" fill="rgb(233,99,24)" fg:x="142" fg:w="1"/><text x="93.0605%" y="783.50"></text></g><g><title>__GI___mmap64 (2 samples, 1.31%)</title><rect x="93.4641%" y="757" width="1.3072%" height="15" fill="rgb(234,209,42)" fg:x="143" fg:w="2"/><text x="93.7141%" y="767.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="93.4641%" y="741" width="1.3072%" height="15" fill="rgb(227,7,12)" fg:x="143" fg:w="2"/><text x="93.7141%" y="751.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="93.4641%" y="725" width="1.3072%" height="15" fill="rgb(245,203,43)" fg:x="143" fg:w="2"/><text x="93.7141%" y="735.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="93.4641%" y="709" width="1.3072%" height="15" fill="rgb(238,205,33)" fg:x="143" fg:w="2"/><text x="93.7141%" y="719.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="93.4641%" y="693" width="1.3072%" height="15" fill="rgb(231,56,7)" fg:x="143" fg:w="2"/><text x="93.7141%" y="703.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="93.4641%" y="677" width="1.3072%" height="15" fill="rgb(244,186,29)" fg:x="143" fg:w="2"/><text x="93.7141%" y="687.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="93.4641%" y="661" width="1.3072%" height="15" fill="rgb(234,111,31)" fg:x="143" fg:w="2"/><text x="93.7141%" y="671.50"></text></g><g><title>[unknown] (2 samples, 1.31%)</title><rect x="93.4641%" y="645" width="1.3072%" height="15" fill="rgb(241,149,10)" fg:x="143" fg:w="2"/><text x="93.7141%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="94.1176%" y="629" width="0.6536%" height="15" fill="rgb(249,206,44)" fg:x="144" fg:w="1"/><text x="94.3676%" y="639.50"></text></g><g><title>__GI___mprotect (1 samples, 0.65%)</title><rect x="94.7712%" y="757" width="0.6536%" height="15" fill="rgb(251,153,30)" fg:x="145" fg:w="1"/><text x="95.0212%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="94.7712%" y="741" width="0.6536%" height="15" fill="rgb(239,152,38)" fg:x="145" fg:w="1"/><text x="95.0212%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="94.7712%" y="725" width="0.6536%" height="15" fill="rgb(249,139,47)" fg:x="145" fg:w="1"/><text x="95.0212%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="94.7712%" y="709" width="0.6536%" height="15" fill="rgb(244,64,35)" fg:x="145" fg:w="1"/><text x="95.0212%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="94.7712%" y="693" width="0.6536%" height="15" fill="rgb(216,46,15)" fg:x="145" fg:w="1"/><text x="95.0212%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.65%)</title><rect x="94.7712%" y="677" width="0.6536%" height="15" fill="rgb(250,74,19)" fg:x="145" fg:w="1"/><text x="95.0212%" y="687.50"></text></g><g><title>lab4 (147 samples, 96.08%)</title><rect x="0.0000%" y="885" width="96.0784%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="147"/><text x="0.2500%" y="895.50">lab4</text></g><g><title>__GI___clone (137 samples, 89.54%)</title><rect x="6.5359%" y="869" width="89.5425%" height="15" fill="rgb(242,149,17)" fg:x="10" fg:w="137"/><text x="6.7859%" y="879.50">__GI___clone</text></g><g><title>start_thread (86 samples, 56.21%)</title><rect x="39.8693%" y="853" width="56.2092%" height="15" fill="rgb(244,29,21)" fg:x="61" fg:w="86"/><text x="40.1193%" y="863.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (84 samples, 54.90%)</title><rect x="41.1765%" y="837" width="54.9020%" height="15" fill="rgb(220,130,37)" fg:x="63" fg:w="84"/><text x="41.4265%" y="847.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 3.27%)</title><rect x="92.8105%" y="821" width="3.2680%" height="15" fill="rgb(211,67,2)" fg:x="142" fg:w="5"/><text x="93.0605%" y="831.50">std..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 3.27%)</title><rect x="92.8105%" y="805" width="3.2680%" height="15" fill="rgb(235,68,52)" fg:x="142" fg:w="5"/><text x="93.0605%" y="815.50">std..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 2.61%)</title><rect x="93.4641%" y="789" width="2.6144%" height="15" fill="rgb(246,142,3)" fg:x="143" fg:w="4"/><text x="93.7141%" y="799.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 2.61%)</title><rect x="93.4641%" y="773" width="2.6144%" height="15" fill="rgb(241,25,7)" fg:x="143" fg:w="4"/><text x="93.7141%" y="783.50">st..</text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.65%)</title><rect x="95.4248%" y="757" width="0.6536%" height="15" fill="rgb(242,119,39)" fg:x="146" fg:w="1"/><text x="95.6748%" y="767.50"></text></g><g><title>__GI___sysconf (1 samples, 0.65%)</title><rect x="95.4248%" y="741" width="0.6536%" height="15" fill="rgb(241,98,45)" fg:x="146" fg:w="1"/><text x="95.6748%" y="751.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.65%)</title><rect x="95.4248%" y="725" width="0.6536%" height="15" fill="rgb(254,28,30)" fg:x="146" fg:w="1"/><text x="95.6748%" y="735.50"></text></g><g><title>all (153 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="153"/><text x="0.2500%" y="911.50"></text></g><g><title>perf-exec (6 samples, 3.92%)</title><rect x="96.0784%" y="885" width="3.9216%" height="15" fill="rgb(222,85,15)" fg:x="147" fg:w="6"/><text x="96.3284%" y="895.50">perf..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="869" width="3.9216%" height="15" fill="rgb(210,85,47)" fg:x="147" fg:w="6"/><text x="96.3284%" y="879.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="853" width="3.9216%" height="15" fill="rgb(224,206,25)" fg:x="147" fg:w="6"/><text x="96.3284%" y="863.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="837" width="3.9216%" height="15" fill="rgb(243,201,19)" fg:x="147" fg:w="6"/><text x="96.3284%" y="847.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="821" width="3.9216%" height="15" fill="rgb(236,59,4)" fg:x="147" fg:w="6"/><text x="96.3284%" y="831.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="805" width="3.9216%" height="15" fill="rgb(254,179,45)" fg:x="147" fg:w="6"/><text x="96.3284%" y="815.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="789" width="3.9216%" height="15" fill="rgb(226,14,10)" fg:x="147" fg:w="6"/><text x="96.3284%" y="799.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="773" width="3.9216%" height="15" fill="rgb(244,27,41)" fg:x="147" fg:w="6"/><text x="96.3284%" y="783.50">[unk..</text></g><g><title>[unknown] (6 samples, 3.92%)</title><rect x="96.0784%" y="757" width="3.9216%" height="15" fill="rgb(235,35,32)" fg:x="147" fg:w="6"/><text x="96.3284%" y="767.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="96.7320%" y="741" width="3.2680%" height="15" fill="rgb(218,68,31)" fg:x="148" fg:w="5"/><text x="96.9820%" y="751.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="96.7320%" y="725" width="3.2680%" height="15" fill="rgb(207,120,37)" fg:x="148" fg:w="5"/><text x="96.9820%" y="735.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="96.7320%" y="709" width="3.2680%" height="15" fill="rgb(227,98,0)" fg:x="148" fg:w="5"/><text x="96.9820%" y="719.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="96.7320%" y="693" width="3.2680%" height="15" fill="rgb(207,7,3)" fg:x="148" fg:w="5"/><text x="96.9820%" y="703.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="96.7320%" y="677" width="3.2680%" height="15" fill="rgb(206,98,19)" fg:x="148" fg:w="5"/><text x="96.9820%" y="687.50">[un..</text></g><g><title>[unknown] (5 samples, 3.27%)</title><rect x="96.7320%" y="661" width="3.2680%" height="15" fill="rgb(217,5,26)" fg:x="148" fg:w="5"/><text x="96.9820%" y="671.50">[un..</text></g></svg></svg>